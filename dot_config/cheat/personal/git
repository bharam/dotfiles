  git

  Commit convention
      <type>[(scope)][!]: <description>

      [ body ]

      [ footer ]

      - type: fix, feat, refactor, docs, revert, build,
              chore, ci, style, perf, and test
      - footer: BREAKING CHANGES: <description> (with '!' after type/scope)

  Stash -- save changes w/o committing
      git stash [save <name>]
      git stash pop
      git stash list
      git stash apply <index>

  Squash commits
      git rebase -i HEAD~3
      git rebase -i --autosquash  (git commit --<squash | fixup>)

  Rebase branch
      git rebase --onto <newbase> <oldbase> <currentbase>

         i.e. o---o---o---o---o  main
                       \
                        o---o---o---o---o  featureA
                             \
                              o---o---o  featureB

              - git rebase --onto main featureA featureB

                                o---o---o  featureB
                               /
              o---o---o---o---o  main
                       \
                        o---o---o---o---o  featureA

  Revert back to older commit (Uncommit)
      git reset --soft HEAD~1                          # staged changes
      git reset --hard HEAD~1                          # unstaged changes
      git fetch origin && git reset --hard origin/main # changes lost

  Bisect -- find the bad commit.
      git bisect <start | reset>          # start / stop bisect
      git bisect <good | bad | skip>      # mark commit
      git bisect log                      # bisect log
      git bisect replay <file>            #
      git bisect run <my_script> [args,]  # run script that can tell good/bad

  Remote
      git remote [-v]                         # list remotes
      git remote add <name> <url>             # add a remote
      git remote rename <old_name> <new_name> # rename remote
      git remote rm <name>                    # remove remote
      git remote show <name>                  # inspect remote

